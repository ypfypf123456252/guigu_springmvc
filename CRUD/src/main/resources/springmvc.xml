<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.atguigu"/>

    <!--配置视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!--
        default-servlet-handler 将在springmvc上下文中定义一个DefaultServletHttpRequestHandler,
        它会对进入DispatcherServlet的请求进行筛选,如果发现是没有经过映射的请求,就将请求交由WEB应用服务器默认的Servlet处理
        ,如果不是静态资源的请求,才由DispatcherServlet继续处理

        一般WEB应用服务器默认的Servlet的名称都是default,若所使用的的WEB服务器的默认Servlet名称不是default,则需要通过
        default-servlet-name 属性显示指示
    -->
    <mvc:default-servlet-handler/>
    <!--
        mvc:annotation-driven 会自动注册RequestMappingHandlerMapping,RequestMappingHandlerAdapter,
            ExceptionHandlerExceptionResolver三个bean.
        还提供以下支持:
            支持使用ConversionService实例对表单参数进行类型转换
            支持使用@NumberFormat annotation,@DateTimeFormat注解完成数据类型的格式化
            支持使用@Valid注解对JavaBean实例进行JSR303验证
            支持使用@RequestBody和@ResponseBody注解
    -->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
<!--        <mvc:annotation-driven/>-->
    <!--配置ConversionService-->
          <!--既可以使用自定义的,又可以使用默认的-->
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
<!--          class="org.springframework.context.support.ConversionServiceFactoryBean">-->
        <property name="converters">
            <set>
                <ref bean="employeeConverter"/>
            </set>
        </property>
    </bean>

    <!--配置国际化资源文件,在i18n中定制错误消息:
    格式:校验注解类名为前缀,结合moddleAttribute,属性名及属性类型名生成多个对应的消息代码-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"/>
    </bean>

    <!--
        运行原理:1.获取name=locale的请求参数2.把locale请求参数解析为locale对象3.获取localeResolver对象
        4.把locale对象设置为session属性5.从session中获取locale对象6.使用该locale属性
    -->
    <!--配置SessionLocaleResolver-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
    <!--配置LocaleChangeInterceptor-->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <!--配置自定义拦截器-->
<!--        <bean class="com.atguigu.interceptors.FirstInterceptor"/>-->
        <!--配置拦截器(不)作用的路径-->
        <mvc:interceptor>
            <mvc:mapping path="/emps"/>
            <bean class="com.atguigu.interceptors.SecondInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
<!--    <mvc:view-controller path="/i18n" view-name="i18n"/>-->
    <mvc:view-controller path="/i18n2" view-name="i18n2"/>

    <!--文件上传 需要配置CommonsMultipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="102400"></property>
    </bean>

    <!--配置使用 SimpleMappingExceptionResolver来映射异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="exception"/>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>
</beans>